import { readdirSync, writeFile, writeFileSync } from "fs";
import { compile } from "json-schema-to-typescript";
import { extname, resolve } from "path";
import type { CustomResourceDefinitionKind } from "./k8s/CustomResourceDefinition";
import { customizeK8sSchema, dedupe, extendInterface,  loadYAML, schemaToTsConfig } from "./utils";
import { JSONSchema4 } from "json-schema";

const fetchCRDs = (): Record<string, CustomResourceDefinitionKind> => {
  // parse all CRDs from generated/openshift-crds
  const files = readdirSync(resolve(__dirname, "../generated/openshift-crds"));

  const CRDs: Record<string, CustomResourceDefinitionKind> = {};

  for (const file of files) {
    if (extname(file) !== ".yaml") continue;

    const doc = loadYAML<CustomResourceDefinitionKind>(
      `../generated/openshift-crds/${file}`,
    );

    if (doc.kind !== "CustomResourceDefinition" || !doc?.metadata?.name) {
      console.warn(`Skipping non-CRD file: ${file}`);
      continue;
    }

    const name = doc.metadata.name;
    CRDs[name] = doc;
  }

  return CRDs;
}

/**
 * Generate TypeScript types from OpenShift CustomResourceDefinitions (CRDs).
 *
 * Limitations:
 * - Only the first (newest) version in the versions list is used.
 */
export const generateOpenShiftTypesFromAPI = () => {
  const CRDs = fetchCRDs();

  // generate types for each CRD
  const compilePromises: Promise<string>[] = [];

  for (const [name, crd] of Object.entries(CRDs)) {
    const usedVersion = crd.spec.versions?.[0];
    if (!usedVersion || !usedVersion.schema?.openAPIV3Schema) {
      console.warn(`Skipping ${name}: no schema defined.`);
      continue;
    }

    const schema = usedVersion.schema.openAPIV3Schema as JSONSchema4;

    const group = crd.spec.group;
    const kind = crd.spec.names.kind;

    customizeK8sSchema(schema, group, usedVersion.name, kind);

    const typeName = `${kind}Kind`;

    const promise = compile(schema, typeName,  schemaToTsConfig)
      .then((ts) => {
        // write type to src/generated/[baseName].d.ts
        const baseName =
          kind.match(/^v\d+(alpha\d+|beta\d+)?(.*)$/)?.[2] ?? kind;
        const filePath = resolve(
          __dirname,
          `../generated/types/openshift/${baseName}.d.ts`,
        );
        writeFile(
          filePath,
          extendInterface(ts, typeName, "K8sResourceCommon"),
          (err) => {
            if (err) {
              console.error(`Error writing type file for CRD: ${name}`, err);
            }
          },
        );
        return filePath;
      })
      .catch((err) => {
        console.error(`Error generating types for CRD: ${name}`, err);
        return "";
      });

    compilePromises.push(promise);
  }

  Promise.all(compilePromises).then((results) => {
    const acc = results.filter(Boolean).map((filePath) => {
      const typeName = filePath.match(/\/([^\/]+)\.d\.ts$/)?.[1];
      return `export type { ${typeName}Kind } from './${typeName}';`;
    });
    // create src/generated/openshift-crds.d.ts
    writeFileSync(
      resolve(__dirname, "../generated/types/openshift/index.d.ts"),
      `// This file is autogenerated from the corresponding OpenShift CustomResourceDefinitions.
// Do not edit this file directly.

// Types generated from ${process.env.OPENSHIFT_API_COMMIT ?? "unknown commit"}

${dedupe<string>(acc).sort().join("\n")}

`,
    );
  });
};
