import { mkdirSync, readdirSync, writeFile } from "fs";
import { JSONSchema4 } from "json-schema";
import { compile } from "json-schema-to-typescript";
import { dirname, extname, resolve } from "path";
import type { CustomResourceDefinitionKind } from "./k8s/v1/CRD/CustomResourceDefinition";
import { customizeK8sSchema } from "./utils/customizeK8sSchema";
import { extendK8sInterface } from "./utils/extendK8sInterface";
import {
  CompilePromiseMetadata,
  IndexFileWriter,
} from "./utils/IndexFileWriter";
import { loadYAML } from "./utils/loadYAML";
import { schemaToTsConfig } from "./utils/schemaToTsConfig";
import { toSafeString } from "./utils/toSafeString";

const fetchCRDs = (): Record<string, CustomResourceDefinitionKind> => {
  // parse all CRDs from generated/openshift-crds
  const files = readdirSync(resolve(__dirname, "../generated/openshift-crds"));

  const CRDs: Record<string, CustomResourceDefinitionKind> = {};

  for (const file of files) {
    if (extname(file) !== ".yaml") continue;

    const doc = loadYAML<CustomResourceDefinitionKind>(
      `../../generated/openshift-crds/${file}`,
    );

    if (doc.kind !== "CustomResourceDefinition" || !doc?.metadata?.name) {
      console.warn(`Skipping non-CRD file: ${file}`);
      continue;
    }

    const name = doc.metadata.name;
    CRDs[name] = doc;
  }

  return CRDs;
};

/**
 * Generate TypeScript types from OpenShift CustomResourceDefinitions (CRDs).
 *
 * Limitations:
 * - Only the first (newest) version in the versions list is used.
 */
export const generateOpenShiftTypesFromAPI = async () => {
  const CRDs = fetchCRDs();

  const compilePromises = new IndexFileWriter();

  for (const [name, crd] of Object.entries(CRDs)) {
    const group = crd.spec.group;
    const kind = crd.spec.names.kind;

    for (const usedVersion of crd.spec.versions ?? []) {
      if (!usedVersion || !usedVersion.schema?.openAPIV3Schema) {
        console.warn(`Skipping ${name}: no schema defined.`);
        continue;
      }

      const schema = usedVersion.schema.openAPIV3Schema as JSONSchema4;

      customizeK8sSchema(schema, group, usedVersion.name, kind);

      const fileName = `${group || "core"}/${usedVersion.name}/${kind}.d.ts`;
      const interfaceName = toSafeString(`${kind}Kind`);

      const path = resolve(
        __dirname,
        `../generated/types/openshift/${fileName}`,
      );

      const promise = compile(schema, interfaceName, schemaToTsConfig(path))
        .then((ts) => {
          mkdirSync(dirname(path), { recursive: true });
          writeFile(
            path,
            extendK8sInterface(ts, schema, interfaceName),
            (err) => {
              if (err) {
                console.error(`Error writing type file for CRD: ${name}`, err);
              }
            },
          );
          return {
            group,
            kind,
            version: usedVersion.name,
            interfaceName,
            fileName,
          } satisfies CompilePromiseMetadata;
        })
        .catch((err) => {
          console.error(`Error generating types for CRD: ${name}`, err);
          throw err;
        });

      compilePromises.addPromise(promise);
    }
  }

  await compilePromises.writeIndexFile(
    resolve(__dirname, "../generated/types/openshift"),
    `// This file is autogenerated from the corresponding OpenShift CustomResourceDefinitions.
// Do not edit this file directly.
`,
  );
};
