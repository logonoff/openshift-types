import { readdirSync, writeFileSync } from "fs";
import { join, resolve } from "path";
import { generateKubernetesTypesFromSwagger } from "./generate-k8s-resource-types";
import { generateOpenShiftTypesFromAPI } from "./generate-openshift-crd-types";
import { toSafeString } from "./utils/toSafeString";

const generateIndexFile = () => {
  writeFileSync(
    resolve(__dirname, "../generated/types/index.d.ts"),
    `// This file is autogenerated from the corresponding resources.
// Do not edit this file directly.

export * from './K8sResourceCommon';
export * from './kubernetes';
export * from './openshift';

`,
  );
};

const generateGVKIndexFiles = (platform: string) => {
  // recursively generate index files for group, version, and kind folders in generated/types/kubernetes and generated/types/openshift
  const basePath = resolve(__dirname, `../generated/types/${platform}`);

  const generateIndex = (dir: string) => {
    const items = readdirSync(dir, { withFileTypes: true });
    const indexLines: string[] = [
      `// This file is autogenerated from the corresponding resources.`,
      `// Do not edit this file directly.`,
      ``,
    ];

    items.forEach((item: any) => {
      if (item.isDirectory()) {
        const subDir = join(dir, item.name);
        generateIndex(subDir);

        // Use "as" to avoid export conflicts
        indexLines.push(
          `export * as ${toSafeString(item.name)} from './${item.name}';`,
        );
      } else if (
        item.isFile() &&
        item.name.endsWith(".d.ts") &&
        item.name !== "index.d.ts" &&
        item.name !== "all.d.ts" &&
        item.name !== "latest.d.ts"
      ) {
        const typeName = item.name.replace(".d.ts", "");

        // we know types are unique so we can just export them directly
        indexLines.push(`export { ${typeName}Kind } from './${typeName}';`);
      }
    });

    if (indexLines.length > 2) {
      writeFileSync(join(dir, "index.d.ts"), indexLines.join("\n") + "\n");
    }
  };

  generateIndex(basePath);
};

generateIndexFile();
(async () => {
  await generateOpenShiftTypesFromAPI();
  generateGVKIndexFiles("openshift");
  await generateKubernetesTypesFromSwagger();
  generateGVKIndexFiles("kubernetes");
})();
