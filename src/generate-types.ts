import {
    parse as parseYAML
} from 'yaml';

import { readdirSync, readFileSync, writeFile, writeFileSync } from 'fs';
import { extname, resolve } from 'path';

import { compile } from 'json-schema-to-typescript'

import type {
    CustomResourceDefinitionKind,
} from './types';

/** Parse a YAML file and return the parsed object */
const loadYAML = <T>(filePath: string): T => {
    const fullPath = resolve(__dirname, filePath);
    const fileContents = readFileSync(fullPath, 'utf8');
    return parseYAML(fileContents);
}

/**
 * Takes a TypeScript interface as a string and adds an "extends ..." clause to it
 *
 * Assumes this has not already been done.
 */
const extendInterface = (ts: string, interfaceName: string, extension: string): string => {
    const interfaceRegex = new RegExp(`(export interface ${interfaceName} )({)`);
    return ts.replace(interfaceRegex, `$1extends ${extension} $2`);
}

const getBannerComment = (crd: CustomResourceDefinitionKind, usedVersionName: string): string => {
    const lines = [
        `// ${crd.spec.group}~${usedVersionName}~${crd.spec.names.kind}`,
        '/**',
        ' * This file is autogenerated from the corresponding CustomResourceDefinition.',
        ' * Do not edit this file directly.',
        ' */',
        '',
        "import type { K8sResourceCommon } from './K8sResourceCommon';",
    ];

    return lines.join('\n');
}

const main = () => {
    // parse all CRDs from generated/openshift-crds
    const files = readdirSync(resolve(__dirname, '../generated/openshift-crds'));

    const CRDs: Record<string, CustomResourceDefinitionKind> = {};

    for (const file of files) {
        if (extname(file) !== '.yaml') continue;

        const doc = loadYAML<CustomResourceDefinitionKind>(`../generated/openshift-crds/${file}`);

        if (doc.kind !== 'CustomResourceDefinition') {
            console.warn(`Skipping non-CRD file: ${file}`);
            continue;
        }

        const name = doc.metadata.name;
        CRDs[name] = doc;
    }

    // generate types for each CRD
    const compilePromises: Promise<string>[] = [];

    for (const [name, crd] of Object.entries(CRDs)) {
        const usedVersion = crd.spec.versions?.[0];

        const schema = usedVersion.schema?.openAPIV3Schema;
        if (!schema) {
            console.warn(`No schema found for CRD: ${name}`);
            continue;
        }

        const schemaName = crd.spec.names.kind;
        if (!schemaName) {
            console.warn(`No kind found for CRD: ${name}`);
            continue;
        }

        // delete common properties that are always present (we will use our own)
        if (schema.properties) {
            delete schema.properties.apiVersion;
            delete schema.properties.kind;
            delete schema.properties.metadata;
        }

        const typeName = `${schemaName}Kind`;

        const promise = compile(schema as object, typeName, {
            additionalProperties: false,
            bannerComment: getBannerComment(crd, usedVersion.name),
        }).then(ts => {
            // write type to src/generated/[baseName].d.ts
            const baseName = schemaName.match(/^v\d+(alpha\d+|beta\d+)?(.*)$/)?.[2] ?? schemaName;
            const filePath = resolve(__dirname, `../generated/types/${baseName}.d.ts`);
            writeFile(filePath, extendInterface(ts, typeName, 'K8sResourceCommon'), err => {
                if (err) {
                    console.error(`Error writing type file for CRD: ${name}`, err);
                } else {
                    console.log(`Generated type file: ${filePath}`);
                }
            });
            return filePath;
        }).
            catch(err => {
                console.error(`Error generating types for CRD: ${name}`, err);
                return '';
            });

        compilePromises.push(promise);
    }

    Promise.all(compilePromises).then(results => {
        const acc = results.filter(Boolean).map(filePath => {
            const typeName = filePath.match(/\/([^\/]+)\.d\.ts$/)?.[1];
            return `export * from './${typeName}';`;
        }).join('\n') + '\n';
        // create src/generated/openshift-crds.d.ts
        writeFileSync(resolve(__dirname, '../generated/types/index.d.ts'),
            `
// This file is autogenerated from the corresponding CustomResourceDefinitions.
// Do not edit this file directly.

export * from './K8sResourceCommon';
${acc}
`);
    });
}

main()
