import type { Options } from "json-schema-to-typescript";
import { relative, resolve } from "path";

const K8sResourceCommonPath = resolve(
  __dirname,
  "../../generated/types/K8sResourceCommon",
);

/** get the path to K8sResourceCommon from a given path */
const resolvePath = (absolutePathOfFile: string): string => {
  const fromDir = resolve(absolutePathOfFile, "..");
  let relativePath = relative(fromDir, K8sResourceCommonPath);
  if (!relativePath.startsWith(".")) {
    relativePath = "./" + relativePath;
  }
  relativePath = relativePath.replace(/\\/g, "/");
  return relativePath;
};

/** Preferred config options for `json-schema-to-typescript`. */
export const schemaToTsConfig = (filePath: string): Partial<Options> => {
  return {
    // prevent `[k: string]: unknown` from being added everywhere
    additionalProperties: false,
    bannerComment: [
      "/**",
      " * This file is autogenerated from the corresponding API definitions.",
      " * Do not edit this file directly.",
      " */",
      "",
      `import type { K8sResourceCommon, RequiredK8sResourceCommon } from '${resolvePath(
        filePath,
      )}';`,
      "",
    ].join("\n"),
    ignoreMinAndMaxItems: true,
    // prettier is done last in generate script
    format: false,
  };
};
